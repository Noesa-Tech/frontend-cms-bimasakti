{
  "version": 3,
  "sources": ["../../src/selectbutton/style/SelectButtonStyle.js", "../../src/selectbutton/BaseSelectButton.vue", "../../src/selectbutton/SelectButton.vue", "../../src/selectbutton/SelectButton.vue?vue&type=template&id=42427211&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-selectbutton {\n    display: inline-flex;\n    user-select: none;\n    vertical-align: bottom;\n    outline-color: transparent;\n    border-radius: ${dt('selectbutton.border.radius')};\n}\n\n.p-selectbutton .p-togglebutton {\n    border-radius: 0;\n    border-width: 1px 1px 1px 0;\n}\n\n.p-selectbutton .p-togglebutton:focus-visible {\n    position: relative;\n    z-index: 1;\n}\n\n.p-selectbutton .p-togglebutton:first-child {\n    border-inline-start-width: 1px;\n    border-start-start-radius: ${dt('selectbutton.border.radius')};\n    border-end-start-radius: ${dt('selectbutton.border.radius')};\n}\n\n.p-selectbutton .p-togglebutton:last-child {\n    border-start-end-radius: ${dt('selectbutton.border.radius')};\n    border-end-end-radius: ${dt('selectbutton.border.radius')};\n}\n\n.p-selectbutton.p-invalid {\n    outline: 1px solid ${dt('selectbutton.invalid.border.color')};\n    outline-offset: 0;\n}\n`;\n\nconst classes = {\n    root: ({ instance }) => [\n        'p-selectbutton p-component',\n        {\n            'p-invalid': instance.$invalid // @todo: check\n        }\n    ]\n};\n\nexport default BaseStyle.extend({\n    name: 'selectbutton',\n    theme,\n    classes\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport SelectButtonStyle from 'primevue/selectbutton/style';\n\nexport default {\n    name: 'BaseSelectButton',\n    extends: BaseEditableHolder,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        multiple: Boolean,\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        dataKey: null,\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: SelectButtonStyle,\n    provide() {\n        return {\n            $pcSelectButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n\n            if (selected && !this.allowEmpty) {\n                return;\n            }\n\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                else newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n            } else {\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n\n            if (selected && !this.allowEmpty) {\n                return;\n            }\n\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                else newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n            } else {\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "$invalid", "BaseStyle", "extend", "name", "name", "BaseEditableHolder", "props", "options", "Array", "optionLabel", "optionValue", "optionDisabled", "multiple", "Boolean", "allowEmpty", "type", "dataKey", "ariaLabelledby", "String", "size", "style", "SelectButtonStyle", "provide", "$pcSelectButton", "$parentInstance", "script", "BaseSelectButton", "inheritAttrs", "emits", "methods", "getOptionLabel", "option", "resolveFieldData", "getOptionValue", "getOptionRenderKey", "isOptionDisabled", "onOptionSelect", "event", "index", "_this", "disabled", "selected", "isSelected", "newValue", "d_value", "filter", "val", "equals", "equalityKey", "concat", "_toConsumableArray", "writeValue", "$emit", "value", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "err", "e", "f", "computed", "directives", "ripple", "Ripple", "components", "ToggleButton", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "role", "ptmi", "_Fragment", "_renderList", "_createBlock", "_component_ToggleButton", "key", "$options", "modelValue", "onLabel", "offLabel", "unstyled", "onChange", "$event", "pt", "ptm", "$slots", "_renderSlot", "_createElementVNode", "ref_for", "_toDisplayString"]
}

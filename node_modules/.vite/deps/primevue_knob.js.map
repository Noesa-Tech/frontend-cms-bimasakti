{
  "version": 3,
  "sources": ["../../src/knob/style/KnobStyle.js", "../../src/knob/BaseKnob.vue", "../../src/knob/Knob.vue", "../../src/knob/Knob.vue?vue&type=template&id=af093930&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-knob-range {\n    fill: none;\n    transition: stroke 0.1s ease-in;\n}\n\n.p-knob-value {\n    animation-name: p-knob-dash-frame;\n    animation-fill-mode: forwards;\n    fill: none;\n}\n\n.p-knob-text {\n    font-size: 1.3rem;\n    text-align: center;\n}\n\n.p-knob svg {\n    border-radius: 50%;\n    outline-color: transparent;\n    transition: background ${dt('knob.transition.duration')}, color ${dt('knob.transition.duration')}, outline-color ${dt('knob.transition.duration')}, box-shadow ${dt('knob.transition.duration')};\n}\n\n.p-knob svg:focus-visible {\n    box-shadow: ${dt('knob.focus.ring.shadow')};\n    outline: ${dt('knob.focus.ring.width')} ${dt('knob.focus.ring.style')} ${dt('knob.focus.ring.color')};\n    outline-offset: ${dt('knob.focus.ring.offset')};\n}\n\n@keyframes p-knob-dash-frame {\n    100% {\n        stroke-dashoffset: 0;\n    }\n}\n`;\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-knob p-component',\n        {\n            'p-disabled': props.disabled,\n            'p-invalid': instance.$invalid\n        }\n    ],\n    range: 'p-knob-range',\n    value: 'p-knob-value',\n    text: 'p-knob-text'\n};\n\nexport default BaseStyle.extend({\n    name: 'knob',\n    theme,\n    classes\n});\n", "<script>\nimport { $dt } from '@primeuix/styled';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport KnobStyle from 'primevue/knob/style';\n\nexport default {\n    name: 'BaseKnob',\n    extends: BaseEditableHolder,\n    props: {\n        size: {\n            type: Number,\n            default: 100\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        min: {\n            type: Number,\n            default: 0\n        },\n        max: {\n            type: Number,\n            default: 100\n        },\n        valueColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.value.background').variable;\n            }\n        },\n        rangeColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.range.background').variable;\n            }\n        },\n        textColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.text.color').variable;\n            }\n        },\n        strokeWidth: {\n            type: Number,\n            default: 14\n        },\n        showValue: {\n            type: Boolean,\n            default: true\n        },\n        valueTemplate: {\n            type: [String, Function],\n            default: '{value}'\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: KnobStyle,\n    provide() {\n        return {\n            $pcKnob: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <svg\n            viewBox=\"0 0 100 100\"\n            role=\"slider\"\n            :width=\"size\"\n            :height=\"size\"\n            :tabindex=\"readonly || disabled ? -1 : tabindex\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"d_value\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            @click=\"onClick\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @mousedown=\"onMouseDown\"\n            @mouseup=\"onMouseUp\"\n            @touchstart.passive=\"onTouchStart\"\n            @touchend=\"onTouchEnd\"\n            v-bind=\"ptm('svg')\"\n        >\n            <path :d=\"rangePath\" :stroke-width=\"strokeWidth\" :stroke=\"rangeColor\" :class=\"cx('range')\" v-bind=\"ptm('range')\"></path>\n            <path :d=\"valuePath\" :stroke-width=\"strokeWidth\" :stroke=\"valueColor\" :class=\"cx('value')\" v-bind=\"ptm('value')\"></path>\n            <text v-if=\"showValue\" :x=\"50\" :y=\"57\" text-anchor=\"middle\" :fill=\"textColor\" :class=\"cx('text')\" v-bind=\"ptm('text')\">{{ valueToDisplay }}</text>\n        </svg>\n    </div>\n</template>\n\n<script>\nimport BaseKnob from './BaseKnob.vue';\n\n// Set fix value for SSR.\nconst Math_PI = 3.14159265358979;\n\nexport default {\n    name: 'Knob',\n    extends: BaseKnob,\n    inheritAttrs: false,\n    emits: ['change'],\n    data() {\n        return {\n            radius: 40,\n            midX: 50,\n            midY: 50,\n            minRadians: (4 * Math_PI) / 3,\n            maxRadians: -Math_PI / 3\n        };\n    },\n    methods: {\n        updateValueByOffset(offsetX, offsetY) {\n            let dx = offsetX - this.size / 2;\n            let dy = this.size / 2 - offsetY;\n            let angle = Math.atan2(dy, dx);\n            let start = -Math_PI / 2 - Math_PI / 6;\n\n            this.updateModel(angle, start);\n        },\n        updateModel(angle, start) {\n            let mappedValue;\n\n            if (angle > this.maxRadians) mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);\n            else if (angle < start) mappedValue = this.mapRange(angle + 2 * Math_PI, this.minRadians, this.maxRadians, this.min, this.max);\n            else return;\n\n            let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n\n            this.writeValue(newValue);\n            this.$emit('change', newValue);\n        },\n        updateModelValue(newValue) {\n            if (newValue > this.max) this.writeValue(this.max);\n            else if (newValue < this.min) this.writeValue(this.min);\n            else this.writeValue(newValue);\n        },\n        mapRange(x, inMin, inMax, outMin, outMax) {\n            return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n        },\n        onClick(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValueByOffset(event.offsetX, event.offsetY);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        },\n        onMouseDown(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('mousemove', this.onMouseMove);\n                window.addEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onMouseUp(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('mousemove', this.onMouseMove);\n                window.removeEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onTouchStart(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('touchmove', this.onTouchMove);\n                window.addEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onTouchEnd(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('touchmove', this.onTouchMove);\n                window.removeEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onMouseMove(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValueByOffset(event.offsetX, event.offsetY);\n                event.preventDefault();\n            }\n        },\n        onTouchMove(event) {\n            if (!this.disabled && !this.readonly && event.touches.length == 1) {\n                const rect = this.$el.getBoundingClientRect();\n                const touch = event.targetTouches.item(0);\n                const offsetX = touch.clientX - rect.left;\n                const offsetY = touch.clientY - rect.top;\n\n                this.updateValueByOffset(offsetX, offsetY);\n            }\n        },\n        onKeyDown(event) {\n            if (!this.disabled && !this.readonly) {\n                switch (event.code) {\n                    case 'ArrowRight':\n\n                    case 'ArrowUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value + this.step);\n                        break;\n                    }\n\n                    case 'ArrowLeft':\n\n                    case 'ArrowDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value - this.step);\n                        break;\n                    }\n\n                    case 'Home': {\n                        event.preventDefault();\n                        this.writeValue(this.min);\n                        break;\n                    }\n\n                    case 'End': {\n                        event.preventDefault();\n                        this.writeValue(this.max);\n                        break;\n                    }\n\n                    case 'PageUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value + 10);\n                        break;\n                    }\n\n                    case 'PageDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value - 10);\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    computed: {\n        rangePath() {\n            return `M ${this.minX} ${this.minY} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX} ${this.maxY}`;\n        },\n        valuePath() {\n            return `M ${this.zeroX} ${this.zeroY} A ${this.radius} ${this.radius} 0 ${this.largeArc} ${this.sweep} ${this.valueX} ${this.valueY}`;\n        },\n        zeroRadians() {\n            if (this.min > 0 && this.max > 0) return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);\n            else return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        valueRadians() {\n            return this.mapRange(this.d_value, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        minX() {\n            return this.midX + Math.cos(this.minRadians) * this.radius;\n        },\n        minY() {\n            return this.midY - Math.sin(this.minRadians) * this.radius;\n        },\n        maxX() {\n            return this.midX + Math.cos(this.maxRadians) * this.radius;\n        },\n        maxY() {\n            return this.midY - Math.sin(this.maxRadians) * this.radius;\n        },\n        zeroX() {\n            return this.midX + Math.cos(this.zeroRadians) * this.radius;\n        },\n        zeroY() {\n            return this.midY - Math.sin(this.zeroRadians) * this.radius;\n        },\n        valueX() {\n            return this.midX + Math.cos(this.valueRadians) * this.radius;\n        },\n        valueY() {\n            return this.midY - Math.sin(this.valueRadians) * this.radius;\n        },\n        largeArc() {\n            return Math.abs(this.zeroRadians - this.valueRadians) < Math_PI ? 0 : 1;\n        },\n        sweep() {\n            return this.valueRadians > this.zeroRadians ? 0 : 1;\n        },\n        valueToDisplay() {\n            if (typeof this.valueTemplate === 'string') {\n                return this.valueTemplate.replace(/{value}/g, this.d_value);\n            } else {\n                return this.valueTemplate(this.d_value);\n            }\n        }\n    }\n};\n//Derived and forked from https://github.com/kramer99/vue-knob-control\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <svg\n            viewBox=\"0 0 100 100\"\n            role=\"slider\"\n            :width=\"size\"\n            :height=\"size\"\n            :tabindex=\"readonly || disabled ? -1 : tabindex\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"d_value\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            @click=\"onClick\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @mousedown=\"onMouseDown\"\n            @mouseup=\"onMouseUp\"\n            @touchstart.passive=\"onTouchStart\"\n            @touchend=\"onTouchEnd\"\n            v-bind=\"ptm('svg')\"\n        >\n            <path :d=\"rangePath\" :stroke-width=\"strokeWidth\" :stroke=\"rangeColor\" :class=\"cx('range')\" v-bind=\"ptm('range')\"></path>\n            <path :d=\"valuePath\" :stroke-width=\"strokeWidth\" :stroke=\"valueColor\" :class=\"cx('value')\" v-bind=\"ptm('value')\"></path>\n            <text v-if=\"showValue\" :x=\"50\" :y=\"57\" text-anchor=\"middle\" :fill=\"textColor\" :class=\"cx('text')\" v-bind=\"ptm('text')\">{{ valueToDisplay }}</text>\n        </svg>\n    </div>\n</template>\n\n<script>\nimport BaseKnob from './BaseKnob.vue';\n\n// Set fix value for SSR.\nconst Math_PI = 3.14159265358979;\n\nexport default {\n    name: 'Knob',\n    extends: BaseKnob,\n    inheritAttrs: false,\n    emits: ['change'],\n    data() {\n        return {\n            radius: 40,\n            midX: 50,\n            midY: 50,\n            minRadians: (4 * Math_PI) / 3,\n            maxRadians: -Math_PI / 3\n        };\n    },\n    methods: {\n        updateValueByOffset(offsetX, offsetY) {\n            let dx = offsetX - this.size / 2;\n            let dy = this.size / 2 - offsetY;\n            let angle = Math.atan2(dy, dx);\n            let start = -Math_PI / 2 - Math_PI / 6;\n\n            this.updateModel(angle, start);\n        },\n        updateModel(angle, start) {\n            let mappedValue;\n\n            if (angle > this.maxRadians) mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);\n            else if (angle < start) mappedValue = this.mapRange(angle + 2 * Math_PI, this.minRadians, this.maxRadians, this.min, this.max);\n            else return;\n\n            let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n\n            this.writeValue(newValue);\n            this.$emit('change', newValue);\n        },\n        updateModelValue(newValue) {\n            if (newValue > this.max) this.writeValue(this.max);\n            else if (newValue < this.min) this.writeValue(this.min);\n            else this.writeValue(newValue);\n        },\n        mapRange(x, inMin, inMax, outMin, outMax) {\n            return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n        },\n        onClick(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValueByOffset(event.offsetX, event.offsetY);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        },\n        onMouseDown(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('mousemove', this.onMouseMove);\n                window.addEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onMouseUp(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('mousemove', this.onMouseMove);\n                window.removeEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onTouchStart(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('touchmove', this.onTouchMove);\n                window.addEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onTouchEnd(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('touchmove', this.onTouchMove);\n                window.removeEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onMouseMove(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValueByOffset(event.offsetX, event.offsetY);\n                event.preventDefault();\n            }\n        },\n        onTouchMove(event) {\n            if (!this.disabled && !this.readonly && event.touches.length == 1) {\n                const rect = this.$el.getBoundingClientRect();\n                const touch = event.targetTouches.item(0);\n                const offsetX = touch.clientX - rect.left;\n                const offsetY = touch.clientY - rect.top;\n\n                this.updateValueByOffset(offsetX, offsetY);\n            }\n        },\n        onKeyDown(event) {\n            if (!this.disabled && !this.readonly) {\n                switch (event.code) {\n                    case 'ArrowRight':\n\n                    case 'ArrowUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value + this.step);\n                        break;\n                    }\n\n                    case 'ArrowLeft':\n\n                    case 'ArrowDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value - this.step);\n                        break;\n                    }\n\n                    case 'Home': {\n                        event.preventDefault();\n                        this.writeValue(this.min);\n                        break;\n                    }\n\n                    case 'End': {\n                        event.preventDefault();\n                        this.writeValue(this.max);\n                        break;\n                    }\n\n                    case 'PageUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value + 10);\n                        break;\n                    }\n\n                    case 'PageDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.d_value - 10);\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    computed: {\n        rangePath() {\n            return `M ${this.minX} ${this.minY} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX} ${this.maxY}`;\n        },\n        valuePath() {\n            return `M ${this.zeroX} ${this.zeroY} A ${this.radius} ${this.radius} 0 ${this.largeArc} ${this.sweep} ${this.valueX} ${this.valueY}`;\n        },\n        zeroRadians() {\n            if (this.min > 0 && this.max > 0) return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);\n            else return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        valueRadians() {\n            return this.mapRange(this.d_value, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        minX() {\n            return this.midX + Math.cos(this.minRadians) * this.radius;\n        },\n        minY() {\n            return this.midY - Math.sin(this.minRadians) * this.radius;\n        },\n        maxX() {\n            return this.midX + Math.cos(this.maxRadians) * this.radius;\n        },\n        maxY() {\n            return this.midY - Math.sin(this.maxRadians) * this.radius;\n        },\n        zeroX() {\n            return this.midX + Math.cos(this.zeroRadians) * this.radius;\n        },\n        zeroY() {\n            return this.midY - Math.sin(this.zeroRadians) * this.radius;\n        },\n        valueX() {\n            return this.midX + Math.cos(this.valueRadians) * this.radius;\n        },\n        valueY() {\n            return this.midY - Math.sin(this.valueRadians) * this.radius;\n        },\n        largeArc() {\n            return Math.abs(this.zeroRadians - this.valueRadians) < Math_PI ? 0 : 1;\n        },\n        sweep() {\n            return this.valueRadians > this.zeroRadians ? 0 : 1;\n        },\n        valueToDisplay() {\n            if (typeof this.valueTemplate === 'string') {\n                return this.valueTemplate.replace(/{value}/g, this.d_value);\n            } else {\n                return this.valueTemplate(this.d_value);\n            }\n        }\n    }\n};\n//Derived and forked from https://github.com/kramer99/vue-knob-control\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "props", "disabled", "$invalid", "range", "value", "text", "BaseStyle", "extend", "name", "name", "BaseEditableHolder", "props", "size", "type", "Number", "readonly", "Boolean", "step", "min", "max", "valueColor", "String", "default", "$dt", "variable", "rangeColor", "textColor", "strokeWidth", "showValue", "valueTemplate", "Function", "tabindex", "ariaLabelledby", "ariaLabel", "style", "KnobStyle", "provide", "$pcKnob", "$parentInstance", "Math_PI", "script", "BaseKnob", "inheritAttrs", "emits", "data", "radius", "midX", "midY", "minRadians", "maxRadians", "methods", "updateValueByOffset", "offsetX", "offsetY", "dx", "dy", "angle", "Math", "atan2", "start", "updateModel", "mappedValue", "mapRange", "newValue", "round", "writeValue", "$emit", "updateModelValue", "x", "inMin", "inMax", "outMin", "outMax", "onClick", "event", "disabled", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "onMouseDown", "window", "addEventListener", "onMouseMove", "onMouseUp", "preventDefault", "removeEventListener", "onTouchStart", "onTouchMove", "onTouchEnd", "touches", "length", "rect", "$el", "getBoundingClientRect", "touch", "targetTouches", "item", "clientX", "left", "clientY", "top", "onKeyDown", "code", "d_value", "computed", "rangePath", "concat", "minX", "minY", "maxX", "maxY", "valuePath", "zeroX", "zeroY", "largeArc", "sweep", "valueX", "valueY", "zeroRadians", "valueRadians", "cos", "sin", "abs", "valueToDisplay", "replace", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "viewBox", "role", "width", "height", "$options", "apply", "arguments", "onKeydown", "onMousedown", "onMouseup", "onTouchend", "ptm", "_createElementVNode", "d", "stroke", "_hoisted_2", "_hoisted_3", "y", "fill", "_hoisted_4"]
}

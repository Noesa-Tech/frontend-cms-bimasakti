{
  "version": 3,
  "sources": ["../../src/togglebutton/style/ToggleButtonStyle.js", "../../src/togglebutton/BaseToggleButton.vue", "../../src/togglebutton/ToggleButton.vue", "../../src/togglebutton/ToggleButton.vue?vue&type=template&id=4560c77c&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-togglebutton {\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    color: ${dt('togglebutton.color')};\n    background: ${dt('togglebutton.background')};\n    border: 1px solid ${dt('togglebutton.border.color')};\n    padding: ${dt('togglebutton.padding')};\n    font-size: 1rem;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n        outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    border-radius: ${dt('togglebutton.border.radius')};\n    outline-color: transparent;\n    font-weight: ${dt('togglebutton.font.weight')};\n}\n\n.p-togglebutton-content {\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ${dt('togglebutton.gap')};\n}\n\n.p-togglebutton-label,\n.p-togglebutton-icon {\n    position: relative;\n    transition: none;\n}\n\n.p-togglebutton::before {\n    content: \"\";\n    background: transparent;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n            outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    position: absolute;\n    inset-inline-start: ${dt('togglebutton.content.left')};\n    inset-block-start: ${dt('togglebutton.content.top')};\n    width: calc(100% - calc(2 * ${dt('togglebutton.content.left')}));\n    height: calc(100% - calc(2 * ${dt('togglebutton.content.top')}));\n    border-radius: ${dt('togglebutton.border.radius')};\n}\n\n.p-togglebutton.p-togglebutton-checked::before {\n    background: ${dt('togglebutton.content.checked.background')};\n    box-shadow: ${dt('togglebutton.content.checked.shadow')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover {\n    background: ${dt('togglebutton.hover.background')};\n    color: ${dt('togglebutton.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked {\n    background: ${dt('togglebutton.checked.background')};\n    border-color: ${dt('togglebutton.checked.border.color')};\n    color: ${dt('togglebutton.checked.color')};\n}\n\n.p-togglebutton:focus-visible {\n    box-shadow: ${dt('togglebutton.focus.ring.shadow')};\n    outline: ${dt('togglebutton.focus.ring.width')} ${dt('togglebutton.focus.ring.style')} ${dt('togglebutton.focus.ring.color')};\n    outline-offset: ${dt('togglebutton.focus.ring.offset')};\n}\n\n.p-togglebutton.p-invalid {\n    border-color: ${dt('togglebutton.invalid.border.color')};\n}\n\n.p-togglebutton:disabled {\n    opacity: 1;\n    cursor: default;\n    background: ${dt('togglebutton.disabled.background')};\n    border-color: ${dt('togglebutton.disabled.border.color')};\n    color: ${dt('togglebutton.disabled.color')};\n}\n\n.p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.color')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.checked.color')};\n}\n\n.p-togglebutton:disabled .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.disabled.color')};\n}\n\n.p-togglebutton-sm {\n    padding: ${dt('togglebutton.sm.padding')};\n    font-size: ${dt('togglebutton.sm.font.size')};\n}\n\n.p-togglebutton-lg {\n    padding: ${dt('togglebutton.lg.padding')};\n    font-size: ${dt('togglebutton.lg.font.size')};\n}\n`;\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-togglebutton p-component',\n        {\n            'p-togglebutton-checked': instance.active,\n            'p-invalid': instance.$invalid,\n            'p-togglebutton-sm p-inputfield-sm': props.size === 'small',\n            'p-togglebutton-lg p-inputfield-lg': props.size === 'large'\n        }\n    ],\n    content: 'p-togglebutton-content',\n    icon: 'p-togglebutton-icon',\n    label: 'p-togglebutton-label'\n};\n\nexport default BaseStyle.extend({\n    name: 'togglebutton',\n    theme,\n    classes\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\n\nexport default {\n    name: 'BaseToggleButton',\n    extends: BaseEditableHolder,\n    props: {\n        onIcon: String,\n        offIcon: String,\n        onLabel: {\n            type: String,\n            default: 'Yes'\n        },\n        offLabel: {\n            type: String,\n            default: 'No'\n        },\n        iconPos: {\n            type: String,\n            default: 'left'\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleButtonStyle,\n    provide() {\n        return {\n            $pcToggleButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "props", "active", "$invalid", "size", "content", "icon", "label", "BaseStyle", "extend", "name", "name", "BaseEditableHolder", "props", "onIcon", "String", "offIcon", "onLabel", "type", "offLabel", "iconPos", "readonly", "Boolean", "tabindex", "Number", "ariaLabelledby", "ariaLabel", "size", "style", "ToggleButtonStyle", "provide", "$pcToggleButton", "$parentInstance", "script", "BaseToggleButton", "inheritAttrs", "emits", "methods", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "active", "disabled", "onChange", "event", "writeValue", "d_value", "$emit", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "computed", "hasLabel", "isNotEmpty", "label", "directives", "ripple", "Ripple", "_withDirectives", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "onClick", "$options", "apply", "arguments", "_createElementVNode", "_renderSlot", "$slots", "value"]
}

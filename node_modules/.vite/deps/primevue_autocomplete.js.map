{
  "version": 3,
  "sources": ["../../src/autocomplete/style/AutoCompleteStyle.js", "../../src/autocomplete/BaseAutoComplete.vue", "../../src/autocomplete/AutoComplete.vue", "../../src/autocomplete/AutoComplete.vue?vue&type=template&id=267c53f6&lang.js"],
  "sourcesContent": ["import { isNotEmpty } from '@primeuix/utils/object';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-autocomplete {\n    display: inline-flex;\n}\n\n.p-autocomplete-loader {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.5rem;\n    inset-inline-end: ${dt('autocomplete.padding.x')};\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-loader {\n    inset-inline-end: calc(${dt('autocomplete.dropdown.width')} + ${dt('autocomplete.padding.x')});\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input,\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input-multiple {\n    border-start-end-radius: 0;\n    border-end-end-radius: 0;\n}\n\n.p-autocomplete-dropdown {\n    cursor: pointer;\n    display: inline-flex;\n    user-select: none;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    width: ${dt('autocomplete.dropdown.width')};\n    border-start-end-radius: ${dt('autocomplete.dropdown.border.radius')};\n    border-end-end-radius: ${dt('autocomplete.dropdown.border.radius')};\n    background: ${dt('autocomplete.dropdown.background')};\n    border: 1px solid ${dt('autocomplete.dropdown.border.color')};\n    border-inline-start: 0 none;\n    color: ${dt('autocomplete.dropdown.color')};\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')}, outline-color ${dt('autocomplete.transition.duration')}, box-shadow ${dt(\n    'autocomplete.transition.duration'\n)};\n    outline-color: transparent;\n}\n\n.p-autocomplete-dropdown:not(:disabled):hover {\n    background: ${dt('autocomplete.dropdown.hover.background')};\n    border-color: ${dt('autocomplete.dropdown.hover.border.color')};\n    color: ${dt('autocomplete.dropdown.hover.color')};\n}\n\n.p-autocomplete-dropdown:not(:disabled):active {\n    background: ${dt('autocomplete.dropdown.active.background')};\n    border-color: ${dt('autocomplete.dropdown.active.border.color')};\n    color: ${dt('autocomplete.dropdown.active.color')};\n}\n\n.p-autocomplete-dropdown:focus-visible {\n    box-shadow: ${dt('autocomplete.dropdown.focus.ring.shadow')};\n    outline: ${dt('autocomplete.dropdown.focus.ring.width')} ${dt('autocomplete.dropdown.focus.ring.style')} ${dt('autocomplete.dropdown.focus.ring.color')};\n    outline-offset: ${dt('autocomplete.dropdown.focus.ring.offset')};\n}\n\n.p-autocomplete .p-autocomplete-overlay {\n    min-width: 100%;\n}\n\n.p-autocomplete-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: ${dt('autocomplete.overlay.background')};\n    color: ${dt('autocomplete.overlay.color')};\n    border: 1px solid ${dt('autocomplete.overlay.border.color')};\n    border-radius: ${dt('autocomplete.overlay.border.radius')};\n    box-shadow: ${dt('autocomplete.overlay.shadow')};\n}\n\n.p-autocomplete-list-container {\n    overflow: auto;\n}\n\n.p-autocomplete-list {\n    margin: 0;\n    list-style-type: none;\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('autocomplete.list.gap')};\n    padding: ${dt('autocomplete.list.padding')};\n}\n\n.p-autocomplete-option {\n    cursor: pointer;\n    white-space: nowrap;\n    position: relative;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    padding: ${dt('autocomplete.option.padding')};\n    border: 0 none;\n    color: ${dt('autocomplete.option.color')};\n    background: transparent;\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')};\n    border-radius: ${dt('autocomplete.option.border.radius')};\n}\n\n.p-autocomplete-option:not(.p-autocomplete-option-selected):not(.p-disabled).p-focus {\n    background: ${dt('autocomplete.option.focus.background')};\n    color: ${dt('autocomplete.option.focus.color')};\n}\n\n.p-autocomplete-option-selected {\n    background: ${dt('autocomplete.option.selected.background')};\n    color: ${dt('autocomplete.option.selected.color')};\n}\n\n.p-autocomplete-option-selected.p-focus {\n    background: ${dt('autocomplete.option.selected.focus.background')};\n    color: ${dt('autocomplete.option.selected.focus.color')};\n}\n\n.p-autocomplete-option-group {\n    margin: 0;\n    padding: ${dt('autocomplete.option.group.padding')};\n    color: ${dt('autocomplete.option.group.color')};\n    background: ${dt('autocomplete.option.group.background')};\n    font-weight: ${dt('autocomplete.option.group.font.weight')};\n}\n\n.p-autocomplete-input-multiple {\n    margin: 0;\n    list-style-type: none;\n    cursor: text;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    padding: calc(${dt('autocomplete.padding.y')} / 2) ${dt('autocomplete.padding.x')};\n    gap: calc(${dt('autocomplete.padding.y')} / 2);\n    color: ${dt('autocomplete.color')};\n    background: ${dt('autocomplete.background')};\n    border: 1px solid ${dt('autocomplete.border.color')};\n    border-radius: ${dt('autocomplete.border.radius')};\n    width: 100%;\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')}, outline-color ${dt('autocomplete.transition.duration')}, box-shadow ${dt(\n    'autocomplete.transition.duration'\n)};\n    outline-color: transparent;\n    box-shadow: ${dt('autocomplete.shadow')};\n}\n\n.p-autocomplete:not(.p-disabled):hover .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.hover.border.color')};\n}\n\n.p-autocomplete:not(.p-disabled).p-focus .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.focus.border.color')};\n    box-shadow: ${dt('autocomplete.focus.ring.shadow')};\n    outline: ${dt('autocomplete.focus.ring.width')} ${dt('autocomplete.focus.ring.style')} ${dt('autocomplete.focus.ring.color')};\n    outline-offset: ${dt('autocomplete.focus.ring.offset')};\n}\n\n.p-autocomplete.p-invalid .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.invalid.border.color')};\n}\n\n.p-variant-filled.p-autocomplete-input-multiple {\n    background: ${dt('autocomplete.filled.background')};\n}\n\n.p-autocomplete:not(.p-disabled):hover .p-variant-filled.p-autocomplete-input-multiple {\n    background: ${dt('autocomplete.filled.hover.background')};\n}\n\n.p-autocomplete:not(.p-disabled).p-focus .p-variant-filled.p-autocomplete-input-multiple  {\n    background: ${dt('autocomplete.filled.focus.background')};\n}\n\n.p-autocomplete.p-disabled .p-autocomplete-input-multiple {\n    opacity: 1;\n    background: ${dt('autocomplete.disabled.background')};\n    color: ${dt('autocomplete.disabled.color')};\n}\n\n.p-autocomplete-chip.p-chip {\n    padding-block-start: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-block-end: calc(${dt('autocomplete.padding.y')} / 2);\n    border-radius: ${dt('autocomplete.chip.border.radius')};\n}\n\n.p-autocomplete-input-multiple:has(.p-autocomplete-chip) {\n    padding-inline-start: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-inline-end: calc(${dt('autocomplete.padding.y')} / 2);\n}\n\n.p-autocomplete-chip-item.p-focus .p-autocomplete-chip {\n    background: ${dt('autocomplete.chip.focus.background')};\n    color: ${dt('autocomplete.chip.focus.color')};\n}\n\n.p-autocomplete-input-chip {\n    flex: 1 1 auto;\n    display: inline-flex;\n    padding-block-start: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-block-end: calc(${dt('autocomplete.padding.y')} / 2);\n}\n\n.p-autocomplete-input-chip input {\n    border: 0 none;\n    outline: 0 none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n    box-shadow: none;\n    border-radius: 0;\n    width: 100%;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    font-size: 1rem;\n    color: inherit;\n}\n\n.p-autocomplete-input-chip input::placeholder {\n    color: ${dt('autocomplete.placeholder.color')};\n}\n\n.p-autocomplete.p-invalid .p-autocomplete-input-chip input::placeholder {\n    color: ${dt('autocomplete.invalid.placeholder.color')};\n}\n\n.p-autocomplete-empty-message {\n    padding: ${dt('autocomplete.empty.message.padding')};\n}\n\n.p-autocomplete-fluid {\n    display: flex;\n}\n\n.p-autocomplete-fluid:has(.p-autocomplete-dropdown) .p-autocomplete-input {\n    width: 1%;\n}\n\n.p-autocomplete:has(.p-inputtext-sm) .p-autocomplete-dropdown {\n    width: ${dt('autocomplete.dropdown.sm.width')};\n}\n\n.p-autocomplete:has(.p-inputtext-sm) .p-autocomplete-dropdown .p-icon {\n    font-size: ${dt('form.field.sm.font.size')};\n    width: ${dt('form.field.sm.font.size')};\n    height: ${dt('form.field.sm.font.size')};\n}\n\n.p-autocomplete:has(.p-inputtext-lg) .p-autocomplete-dropdown {\n    width: ${dt('autocomplete.dropdown.lg.width')};\n}\n\n.p-autocomplete:has(.p-inputtext-lg) .p-autocomplete-dropdown .p-icon {\n    font-size: ${dt('form.field.lg.font.size')};\n    width: ${dt('form.field.lg.font.size')};\n    height: ${dt('form.field.lg.font.size')};\n}\n`;\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-autocomplete p-component p-inputwrapper',\n        {\n            'p-disabled': props.disabled,\n            'p-invalid': instance.$invalid,\n            'p-focus': instance.focused,\n            'p-inputwrapper-filled': instance.$filled || isNotEmpty(instance.inputValue),\n            'p-inputwrapper-focus': instance.focused,\n            'p-autocomplete-open': instance.overlayVisible,\n            'p-autocomplete-fluid': instance.$fluid\n        }\n    ],\n    pcInputText: 'p-autocomplete-input',\n    inputMultiple: ({ props, instance }) => [\n        'p-autocomplete-input-multiple',\n        {\n            'p-variant-filled': instance.$variant === 'filled'\n        }\n    ],\n    chipItem: ({ instance, i }) => [\n        'p-autocomplete-chip-item',\n        {\n            'p-focus': instance.focusedMultipleOptionIndex === i\n        }\n    ],\n    pcChip: 'p-autocomplete-chip',\n    chipIcon: 'p-autocomplete-chip-icon',\n    inputChip: 'p-autocomplete-input-chip',\n    loader: 'p-autocomplete-loader',\n    dropdown: 'p-autocomplete-dropdown',\n    overlay: 'p-autocomplete-overlay p-component',\n    listContainer: 'p-autocomplete-list-container',\n    list: 'p-autocomplete-list',\n    optionGroup: 'p-autocomplete-option-group',\n    option: ({ instance, option, i, getItemOptions }) => [\n        'p-autocomplete-option',\n        {\n            'p-autocomplete-option-selected': instance.isSelected(option),\n            'p-focus': instance.focusedOptionIndex === instance.getOptionIndex(i, getItemOptions),\n            'p-disabled': instance.isOptionDisabled(option)\n        }\n    ],\n    emptyMessage: 'p-autocomplete-empty-message'\n};\n\nexport default BaseStyle.extend({\n    name: 'autocomplete',\n    theme,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\n\nexport default {\n    name: 'BaseAutoComplete',\n    extends: BaseInput,\n    props: {\n        suggestions: {\n            type: Array,\n            default: null\n        },\n        optionLabel: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dropdown: {\n            type: Boolean,\n            default: false\n        },\n        dropdownMode: {\n            type: String,\n            default: 'blank'\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        minLength: {\n            type: Number,\n            default: 1\n        },\n        delay: {\n            type: Number,\n            default: 300\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        forceSelection: {\n            type: Boolean,\n            default: false\n        },\n        completeOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelStyle: {\n            type: Object,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        overlayStyle: {\n            type: Object,\n            default: null\n        },\n        overlayClass: {\n            type: [String, Object],\n            default: null\n        },\n        dropdownIcon: {\n            type: String,\n            default: null\n        },\n        dropdownClass: {\n            type: [String, Object],\n            default: null\n        },\n        loader: {\n            type: String,\n            default: null\n        },\n        loadingIcon: {\n            type: String,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: null\n        },\n        chipIcon: {\n            type: String,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        searchLocale: {\n            type: String,\n            default: undefined\n        },\n        searchMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySearchMessage: {\n            type: String,\n            default: null\n        },\n        showEmptyMessage: {\n            type: Boolean,\n            default: true\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        typeahead: {\n            type: Boolean,\n            default: true\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: AutoCompleteStyle,\n    provide() {\n        return {\n            $pcAutoComplete: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :id=\"panelId\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"{ ...panelStyle, ...overlayStyle }\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.d_value || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :id=\"panelId\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"{ ...panelStyle, ...overlayStyle }\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.d_value || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "inlineStyles", "root", "position", "classes", "_ref2", "instance", "props", "disabled", "$invalid", "focused", "$filled", "isNotEmpty", "inputValue", "overlayVisible", "$fluid", "pcInputText", "inputMultiple", "_ref3", "$variant", "chipItem", "_ref4", "i", "focusedMultipleOptionIndex", "pcChip", "chipIcon", "inputChip", "loader", "dropdown", "overlay", "listContainer", "list", "optionGroup", "option", "_ref5", "getItemOptions", "isSelected", "focusedOptionIndex", "getOptionIndex", "isOptionDisabled", "emptyMessage", "BaseStyle", "extend", "name", "name", "BaseInput", "props", "suggestions", "type", "Array", "optionLabel", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "scrollHeight", "String", "dropdown", "Boolean", "dropdownMode", "multiple", "loading", "placeholder", "dataKey", "minLength", "Number", "delay", "appendTo", "Object", "forceSelection", "completeOnFocus", "inputId", "inputStyle", "inputClass", "panelStyle", "panelClass", "overlayStyle", "overlayClass", "dropdownIcon", "dropdownClass", "loader", "loadingIcon", "removeTokenIcon", "chipIcon", "virtualScrollerOptions", "autoOptionFocus", "selectOnFocus", "focusOnHover", "searchLocale", "undefined", "searchMessage", "selectionMessage", "emptySelectionMessage", "emptySearchMessage", "showEmptyMessage", "tabindex", "typeahead", "ariaLabel", "ariaLabelledby", "style", "AutoCompleteStyle", "provide", "$pcAutoComplete", "$parentInstance", "script", "BaseAutoComplete", "inheritAttrs", "emits", "inject", "$pcFluid", "outsideClickListener", "resizeListener", "scrollHandler", "overlay", "virtualScroller", "searchTimeout", "dirty", "data", "id", "$attrs", "clicked", "focused", "focusedOptionIndex", "focusedMultipleOptionIndex", "overlayVisible", "searching", "watch", "$attrsId", "newValue", "UniqueComponentId", "show", "findFirstFocusedOptionIndex", "visibleOptions", "length", "hide", "autoUpdateModel", "mounted", "updated", "alignOverlay", "beforeUnmount", "unbindOutsideClickListener", "unbindResizeListener", "destroy", "ZIndex", "clear", "methods", "getOptionIndex", "index", "fn", "virtualScrollerDisabled", "getOptionLabel", "option", "resolveFieldData", "getOptionValue", "getOptionRenderKey", "getPTOptions", "itemOptions", "key", "ptm", "context", "selected", "isSelected", "disabled", "isOptionDisabled", "isOptionGroup", "optionGroup", "group", "getOptionGroupLabel", "getOptionGroupChildren", "getAriaPosInset", "_this", "slice", "filter", "isFocus", "$emit", "focus", "$refs", "focusInput", "$el", "_this2", "_hide", "_this2$$refs$focusInp", "setTimeout", "onFocus", "event", "search", "target", "value", "scrollInView", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "onKeyDown", "preventDefault", "code", "onArrowDownKey", "onArrowUpKey", "onArrowLeftKey", "onArrowRightKey", "onHomeKey", "onEndKey", "onPageDownKey", "onPageUpKey", "onEnterKey", "onEscapeKey", "onTabKey", "onBackspaceKey", "onInput", "_this3", "clearTimeout", "query", "updateModel", "onChange", "_this4", "valid", "matchedValue", "find", "isOptionMatched", "onOptionSelect", "onMultipleContainerFocus", "onMultipleContainerBlur", "onMultipleContainerKeyDown", "onArrowLeftKeyOnMultiple", "onArrowRightKeyOnMultiple", "onBackspaceKeyOnMultiple", "onContainerClick", "isDropdownClicked", "contains", "onDropdownClick", "originalEvent", "isHide", "arguments", "concat", "_toConsumableArray", "d_value", "onOptionMouseMove", "changeFocusedOptionIndex", "onOverlayClick", "OverlayEventBus", "emit", "onOverlayKeyDown", "optionIndex", "findNextOptionIndex", "findFirstOptionIndex", "altKey", "findPrevOptionIndex", "findLastOptionIndex", "findLastFocusedOptionIndex", "currentTarget", "isEmpty", "$filled", "multiContainer", "stopPropagation", "len", "setSelectionRange", "shiftKey", "isNotEmpty", "removedValue", "writeValue", "removeOption", "onOverlayEnter", "el", "set", "$primevue", "config", "zIndex", "addStyle", "position", "top", "left", "onOverlayAfterEnter", "bindOutsideClickListener", "bindScrollListener", "bindResizeListener", "onOverlayLeave", "unbindScrollListener", "onOverlayAfterLeave", "relativePosition", "minWidth", "getOuterWidth", "absolutePosition", "_this5", "isOutsideClicked", "document", "addEventListener", "removeEventListener", "_this6", "ConnectedOverlayScrollHandler", "container", "_this7", "isTouchDevice", "window", "isInputClicked", "dropdownButton", "_this$getOptionLabel", "isValidOption", "toLocaleLowerCase", "isValidSelectedOption", "isEquals", "value1", "value2", "equals", "equalityKey", "_this8", "optionValue", "some", "_this9", "findIndex", "_this10", "findLastIndex", "_this11", "matchedOptionIndex", "_this12", "findSelectedOptionIndex", "_this13", "selectedIndex", "source", "trim", "_this14", "removedOption", "_", "i", "map", "_this15", "$nextTick", "focusedOptionId", "element", "findSingle", "list", "scrollIntoView", "block", "inline", "scrollToIndex", "flatOptions", "options", "_this16", "reduce", "result", "push", "forEach", "o", "overlayRef", "listRef", "contentRef", "virtualScrollerRef", "computed", "inputValue", "_typeof", "label", "hasSelectedOption", "searchResultMessageText", "searchMessageText", "replaceAll", "emptySearchMessageText", "locale", "selectionMessageText", "emptySelectionMessageText", "selectedMessageText", "listAriaLabel", "aria", "listLabel", "focusedMultipleOptionId", "ariaSetSize", "_this17", "panelId", "components", "InputText", "VirtualScroller", "Portal", "ChevronDownIcon", "SpinnerIcon", "Chip", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "sx", "onClick", "$options", "apply", "ptmi", "_createBlock", "_component_InputText", "$formName", "_normalizeClass", "fluid", "$fluid", "size", "invalid", "variant", "autocomplete", "role", "$data", "onKeydown", "unstyled", "pt", "_Fragment", "_renderList", "_renderSlot", "removeCallback", "_createVNode", "_component_Chip", "removeIcon", "removable", "onRemove", "$event", "removeicon", "$slots", "chipicon", "_createElementVNode", "_hoisted_3", "_component_SpinnerIcon", "spin", "toggleCallback", "_resolveDynamicComponent", "_component_Portal", "_Transition", "onEnter", "onAfterEnter", "onLeave", "onAfterLeave", "_objectSpread", "_component_VirtualScroller", "items", "content", "_withCtx", "_ref", "styleClass", "getItemOptions", "contentStyle", "itemSize", "height", "_withDirectives", "onMousemove", "_createTextVNode", "_toDisplayString", "_ref2"]
}
